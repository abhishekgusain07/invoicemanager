name: Testing Action (Waitlist Mode Off)

on:
  # Run every 20 minutes for testing purposes
  schedule:
    - cron: "*/20 * * * *"

  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      test_message:
        description: "Test message to include in logs"
        required: false
        default: "Manual test run"
        type: string

# Security: Limit permissions to minimum required
permissions:
  contents: read

jobs:
  test_logging:
    name: Test GitHub Action Logging
    runs-on: ubuntu-latest

    # Timeout to prevent runaway jobs
    timeout-minutes: 5

    steps:
      - name: Set environment variables
        run: |
          echo "WORKFLOW_START_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          echo "RUN_UUID=$(uuidgen)" >> $GITHUB_ENV
          echo "TEST_MESSAGE=${{ github.event.inputs.test_message || 'Scheduled test run' }}" >> $GITHUB_ENV

          # Set deployment URL based on branch
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "DEPLOYMENT_URL=${{ secrets.PRODUCTION_URL }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_URL=${{ secrets.STAGING_URL }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi

      - name: Enhanced environment validation
        id: validate_env
        run: |
          echo "üîç Validating environment configuration..."

          # Validate required secrets and environment variables
          validation_failed=false

          # Check CRON_SECRET
          if [[ -z "${{ secrets.CRON_SECRET }}" ]]; then
            echo "‚ùå CRON_SECRET is not configured"
            validation_failed=true
          else
            echo "‚úÖ CRON_SECRET is configured"
          fi

          # Check deployment URL
          if [[ -z "$DEPLOYMENT_URL" ]]; then
            echo "‚ùå Deployment URL not configured for $ENVIRONMENT"
            validation_failed=true
          else
            echo "‚úÖ Deployment URL configured for $ENVIRONMENT"
            # Validate URL format
            if [[ ! "$DEPLOYMENT_URL" =~ ^https?:// ]]; then
              echo "‚ùå Invalid deployment URL format: $DEPLOYMENT_URL"
              validation_failed=true
            else
              echo "‚úÖ Deployment URL format is valid"
            fi
          fi

          # Check GitHub context variables
          if [[ -z "${{ github.run_id }}" ]]; then
            echo "‚ùå GitHub run ID not available"
            validation_failed=true
          else
            echo "‚úÖ GitHub run ID: ${{ github.run_id }}"
          fi

          if [[ -z "${{ github.ref }}" ]]; then
            echo "‚ùå GitHub ref not available"
            validation_failed=true
          else
            echo "‚úÖ GitHub ref: ${{ github.ref }}"
          fi

          # Set validation result
          if [[ "$validation_failed" == "true" ]]; then
            echo "‚ùå Environment validation failed"
            echo "env_valid=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Environment validation passed"
            echo "env_valid=true" >> $GITHUB_OUTPUT
          fi

      - name: Check waitlist mode and application health
        id: check_mode
        if: steps.validate_env.outputs.env_valid == 'true'
        run: |
          echo "üîç Checking application health and waitlist mode status..."
          echo "This workflow should only run when NEXT_PUBLIC_WAITLIST_MODE = false (full app mode)"

          # Call the health endpoint to get both health status and waitlist mode
          health_response=$(curl -s --max-time 30 --retry 2 --retry-delay 5 \
            "$DEPLOYMENT_URL/api/health" || echo '{"error": "failed_to_fetch"}')

          # Extract HTTP status from a separate call for health checking
          http_status=$(curl -s -o /dev/null -w "%{http_code}" \
            --max-time 30 --retry 2 --retry-delay 5 \
            "$DEPLOYMENT_URL/api/health" || echo "000")

          echo "Health check HTTP status: $http_status"

          if [[ "$http_status" =~ ^2[0-9][0-9]$ ]]; then
            echo "‚úÖ Application is healthy (HTTP $http_status)"
            
            # Parse the waitlist mode from the response
            waitlist_mode=$(echo "$health_response" | jq -r '.environment.waitlistMode // "null"' 2>/dev/null || echo "null")
            
            echo "Current waitlist mode: $waitlist_mode"

            # Check waitlist mode status
            if [[ "$waitlist_mode" == "null" || "$waitlist_mode" == "" ]]; then
              echo "‚ö†Ô∏è Could not determine waitlist mode from health endpoint"
              echo "Response: $health_response"
              echo "Aborting workflow execution for safety"
              echo "should_run=false" >> $GITHUB_OUTPUT
            elif [[ "$waitlist_mode" == "false" ]]; then
              echo "‚úÖ Waitlist mode is disabled (false) - proceeding with testing action"
              echo "This is the correct mode for the testing workflow"
              echo "should_run=true" >> $GITHUB_OUTPUT
            elif [[ "$waitlist_mode" == "true" ]]; then
              echo "‚è≠Ô∏è Waitlist mode is enabled (true) - skipping testing action"
              echo "Testing action should only run when waitlist mode is disabled"
              echo "The scheduled-reminders workflow should handle this scenario instead"
              echo "should_run=false" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Unexpected waitlist mode value: $waitlist_mode"
              echo "Expected 'true' or 'false', got: $waitlist_mode"
              echo "Aborting workflow execution for safety"
              echo "should_run=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Application health check failed (HTTP $http_status)"
            echo "Application may be unavailable or misconfigured"
            echo "Cannot proceed with testing when application is unhealthy"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Log workflow start
        if: steps.check_mode.outputs.should_run == 'true'
        run: |
          echo "üìù Logging workflow start..."

          # Create initial log entry
          response=$(curl -s -w "\n%{http_code}" -X POST "$DEPLOYMENT_URL/api/github-action-logs" \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"actionName\": \"testing-action\",
              \"runId\": \"${{ github.run_id }}\",
              \"workflowName\": \"Testing Action (Waitlist Mode Off)\",
              \"gitRef\": \"${{ github.ref }}\",
              \"environment\": \"$ENVIRONMENT\",
              \"startTime\": \"$WORKFLOW_START_TIME\",
              \"status\": \"running\",
              \"triggerEvent\": \"${{ github.event_name }}\",
              \"actor\": \"${{ github.actor }}\",
              \"metadata\": {
                \"testMessage\": \"$TEST_MESSAGE\",
                \"runNumber\": ${{ github.run_number }},
                \"repository\": \"${{ github.repository }}\",
                \"workflowFile\": \"testing-action.yml\"
              }
            }")

          # Parse response
          response_body=$(echo "$response" | head -n -1)
          http_code=$(echo "$response" | tail -n 1)

          echo "Log start HTTP status: $http_code"
          echo "Log start response: $response_body"

          if [[ ! "$http_code" =~ ^2[0-9][0-9]$ ]]; then
            echo "‚ùå Failed to log workflow start (HTTP $http_code)"
            echo "Response: $response_body"
          else
            echo "‚úÖ Workflow start logged successfully"
          fi

      - name: Simulate test work
        if: steps.check_mode.outputs.should_run == 'true'
        run: |
          echo "üß™ Simulating test work..."
          echo "Test message: $TEST_MESSAGE"
          echo "Run ID: ${{ github.run_id }}"
          echo "Environment: $ENVIRONMENT"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"

          # Simulate some work
          sleep 5

          # Generate some test data
          echo "Generating test data..."
          test_result="success"
          test_duration=$(( $RANDOM % 1000 + 100 ))

          echo "Test completed with result: $test_result"
          echo "Test duration: ${test_duration}ms"

          # Export for next step
          echo "TEST_RESULT=$test_result" >> $GITHUB_ENV
          echo "TEST_DURATION=$test_duration" >> $GITHUB_ENV

      - name: Log workflow completion
        if: always() && steps.check_mode.outputs.should_run == 'true'
        run: |
          echo "üìù Logging workflow completion..."

          # Calculate total duration
          end_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          start_timestamp=$(date -d "$WORKFLOW_START_TIME" +%s)
          end_timestamp=$(date +%s)
          duration_ms=$(( (end_timestamp - start_timestamp) * 1000 ))

          # Determine final status
          if [[ "${{ job.status }}" == "success" ]]; then
            final_status="completed"
            error_details=""
          else
            final_status="failed"
            error_details="Workflow failed with status: ${{ job.status }}"
          fi

          # Update log entry
          response=$(curl -s -w "\n%{http_code}" -X PUT "$DEPLOYMENT_URL/api/github-action-logs" \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"runId\": \"${{ github.run_id }}\",
              \"endTime\": \"$end_time\",
              \"durationMs\": $duration_ms,
              \"status\": \"$final_status\",
              \"errorDetails\": \"$error_details\",
              \"metadata\": {
                \"testMessage\": \"$TEST_MESSAGE\",
                \"testResult\": \"${TEST_RESULT:-unknown}\",
                \"testDuration\": \"${TEST_DURATION:-0}\",
                \"runNumber\": ${{ github.run_number }},
                \"repository\": \"${{ github.repository }}\",
                \"workflowFile\": \"testing-action.yml\",
                \"finalStatus\": \"${{ job.status }}\"
              }
            }")

          # Parse response
          response_body=$(echo "$response" | head -n -1)
          http_code=$(echo "$response" | tail -n 1)

          echo "Log completion HTTP status: $http_code"
          echo "Log completion response: $response_body"

          if [[ ! "$http_code" =~ ^2[0-9][0-9]$ ]]; then
            echo "‚ùå Failed to log workflow completion (HTTP $http_code)"
            echo "Response: $response_body"
          else
            echo "‚úÖ Workflow completion logged successfully"
          fi

      - name: Workflow summary
        if: always()
        run: |
          echo "üìä Testing Action Summary"
          echo "========================="
          echo "Should run: ${{ steps.check_mode.outputs.should_run }}"
          echo "Environment: $ENVIRONMENT"
          echo "Test message: $TEST_MESSAGE"
          echo "Started: $WORKFLOW_START_TIME"
          echo "Completed: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Status: ${{ job.status }}"
          echo "Run ID: ${{ github.run_id }}"

          if [[ "${{ steps.check_mode.outputs.should_run }}" == "true" ]]; then
            echo "‚úÖ Testing action executed successfully"
            echo "Waitlist mode was disabled (false) - testing workflow ran"
            echo "Check the /githubaction page to see this run logged"
          else
            echo "‚è≠Ô∏è Skipped - waitlist mode check failed or mode was enabled"
            echo "This workflow only runs when NEXT_PUBLIC_WAITLIST_MODE = false"
            echo "Current waitlist mode status prevented execution"
          fi

      - name: Notify on failure (Optional)
        if: failure()
        run: |
          echo "üö® Testing action failed"
          echo "This is for testing purposes only"
          echo "Check the logs above for details"
