name: Scheduled Invoice Reminders

on:
  # Run daily at 9:00 AM UTC (adjust timezone as needed)
  schedule:
    - cron: "0 9 * * *"

  # Allow manual triggering for testing and troubleshooting
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Run in dry-run mode (logs only, no actual processing)"
        required: false
        default: "false"
        type: boolean
      log_level:
        description: "Log level for debugging"
        required: false
        default: "info"
        type: choice
        options:
          - "error"
          - "warn"
          - "info"
          - "debug"

# Security: Limit permissions to minimum required
permissions:
  contents: read

jobs:
  send_reminders:
    name: Process Scheduled Invoice Reminders
    runs-on: ubuntu-latest

    # Timeout to prevent runaway jobs (adjust as needed)
    timeout-minutes: 15

    # Environment-specific configuration
    environment:
      name: ${{ github.ref == 'refs/heads/master' && 'production' || 'staging' }}

    steps:
      - name: Set environment variables
        run: |
          echo "WORKFLOW_START_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          echo "DRY_RUN=${{ github.event.inputs.dry_run || 'false' }}" >> $GITHUB_ENV
          echo "LOG_LEVEL=${{ github.event.inputs.log_level || 'info' }}" >> $GITHUB_ENV

          # Set deployment URL based on branch
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "DEPLOYMENT_URL=${{ secrets.PRODUCTION_URL }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_URL=${{ secrets.STAGING_URL }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi

      - name: Enhanced environment validation
        id: validate_env
        run: |
          echo "üîç Validating environment configuration..."
          echo "Environment: $ENVIRONMENT"
          echo "Deployment URL: ${DEPLOYMENT_URL:0:30}..." # Only show first 30 chars for security
          echo "Dry Run: $DRY_RUN"
          echo "Log Level: $LOG_LEVEL"
          echo "Workflow triggered by: ${{ github.event_name }}"
          echo "Git ref: ${{ github.ref }}"
          echo "Workflow start time: $WORKFLOW_START_TIME"

          # Track validation failures
          validation_failed=false

          # Validate required secrets are set
          if [[ -z "${{ secrets.CRON_SECRET }}" ]]; then
            echo "‚ùå CRON_SECRET is not configured"
            validation_failed=true
          else
            echo "‚úÖ CRON_SECRET is configured"
          fi

          # Validate deployment URL
          if [[ -z "$DEPLOYMENT_URL" ]]; then
            echo "‚ùå Deployment URL is not configured for $ENVIRONMENT"
            validation_failed=true
          else
            echo "‚úÖ Deployment URL configured for $ENVIRONMENT"
            # Validate URL format
            if [[ ! "$DEPLOYMENT_URL" =~ ^https?:// ]]; then
              echo "‚ùå Invalid deployment URL format"
              validation_failed=true
            else
              echo "‚úÖ Deployment URL format is valid"
            fi
          fi

          # Validate environment-specific secrets
          if [[ "$ENVIRONMENT" == "production" ]]; then
            if [[ -z "${{ secrets.PRODUCTION_URL }}" ]]; then
              echo "‚ùå PRODUCTION_URL secret not configured"
              validation_failed=true
            else
              echo "‚úÖ PRODUCTION_URL secret configured"
            fi
          elif [[ "$ENVIRONMENT" == "staging" ]]; then
            if [[ -z "${{ secrets.STAGING_URL }}" ]]; then
              echo "‚ùå STAGING_URL secret not configured"
              validation_failed=true
            else
              echo "‚úÖ STAGING_URL secret configured"
            fi
          fi

          # Validate GitHub context variables
          if [[ -z "${{ github.run_id }}" ]]; then
            echo "‚ùå GitHub run ID not available"
            validation_failed=true
          else
            echo "‚úÖ GitHub run ID: ${{ github.run_id }}"
          fi

          if [[ -z "${{ github.workflow }}" ]]; then
            echo "‚ùå GitHub workflow name not available"
            validation_failed=true
          else
            echo "‚úÖ GitHub workflow: ${{ github.workflow }}"
          fi

          # Validate input parameters
          if [[ "$DRY_RUN" != "true" && "$DRY_RUN" != "false" ]]; then
            echo "‚ùå Invalid DRY_RUN value: $DRY_RUN (must be 'true' or 'false')"
            validation_failed=true
          else
            echo "‚úÖ DRY_RUN value is valid: $DRY_RUN"
          fi

          # Set validation result
          if [[ "$validation_failed" == "true" ]]; then
            echo "‚ùå Environment validation failed - aborting workflow"
            echo "env_valid=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Environment validation passed"
            echo "env_valid=true" >> $GITHUB_OUTPUT
          fi

      - name: Check waitlist mode
        id: check_waitlist
        if: steps.validate_env.outputs.env_valid == 'true'
        run: |
          echo "üîç Checking waitlist mode status from deployed application..."
          echo "This workflow should only run when NEXT_PUBLIC_WAITLIST_MODE = true (production mode)"

          # Call the health endpoint to get the current waitlist mode status
          health_response=$(curl -s --max-time 30 --retry 2 --retry-delay 5 \
            "$DEPLOYMENT_URL/api/health" || echo '{"error": "failed_to_fetch"}')

          echo "Health endpoint response received"

          # Parse the waitlist mode from the response
          waitlist_mode=$(echo "$health_response" | jq -r '.environment.waitlistMode // "null"' 2>/dev/null || echo "null")

          echo "Current waitlist mode: $waitlist_mode"

          # Check if we can determine the waitlist mode
          if [[ "$waitlist_mode" == "null" || "$waitlist_mode" == "" ]]; then
            echo "‚ö†Ô∏è Could not determine waitlist mode from health endpoint"
            echo "Response: $health_response"
            echo "Aborting workflow execution for safety"
            echo "should_process=false" >> $GITHUB_OUTPUT
          elif [[ "$waitlist_mode" == "true" ]]; then
            echo "‚úÖ Waitlist mode is enabled (true) - proceeding with reminder processing"
            echo "This is the correct mode for scheduled reminders"
            echo "should_process=true" >> $GITHUB_OUTPUT
          elif [[ "$waitlist_mode" == "false" ]]; then
            echo "‚è≠Ô∏è Waitlist mode is disabled (false) - skipping reminder processing"
            echo "Scheduled reminders should only run when waitlist mode is enabled"
            echo "The testing-action workflow should handle this scenario instead"
            echo "should_process=false" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Unexpected waitlist mode value: $waitlist_mode"
            echo "Expected 'true' or 'false', got: $waitlist_mode"
            echo "Aborting workflow execution for safety"
            echo "should_process=false" >> $GITHUB_OUTPUT
          fi

      - name: Enhanced health check
        if: steps.validate_env.outputs.env_valid == 'true' && steps.check_waitlist.outputs.should_process == 'true'
        run: |
          echo "üè• Performing enhanced health check on $DEPLOYMENT_URL..."

          # Check if the application is healthy before triggering reminders
          health_response=$(curl -s -o /dev/null -w "%{http_code}" \
            --max-time 30 \
            --retry 3 \
            --retry-delay 5 \
            --retry-connrefused \
            "$DEPLOYMENT_URL/api/health" || echo "000")

          echo "Health check response: HTTP $health_response"

          if [[ "$health_response" =~ ^2[0-9][0-9]$ ]]; then
            echo "‚úÖ Health check passed (HTTP $health_response)"
            
            # Additional validation: check if the application can handle API requests
            echo "üîç Testing API endpoint accessibility..."
            api_test=$(curl -s -o /dev/null -w "%{http_code}" \
              --max-time 15 \
              -H "User-Agent: GitHub-Actions-Health-Check/1.0" \
              "$DEPLOYMENT_URL/api/health" || echo "000")
            
            if [[ "$api_test" =~ ^2[0-9][0-9]$ ]]; then
              echo "‚úÖ API endpoint test passed (HTTP $api_test)"
            else
              echo "‚ö†Ô∏è API endpoint test failed (HTTP $api_test), but proceeding"
            fi
          else
            echo "‚ùå Health check failed (HTTP $health_response)"
            echo "Application may be unavailable, aborting reminder processing"
            echo "Possible causes:"
            echo "- Application is down or starting up"
            echo "- Network connectivity issues"
            echo "- Invalid deployment URL configuration"
            exit 1
          fi

      - name: Log workflow start
        if: steps.check_waitlist.outputs.should_process == 'true'
        run: |
          echo "üìù Logging workflow start..."

          # Create initial log entry
          response=$(curl -s -w "\n%{http_code}" -X POST "$DEPLOYMENT_URL/api/github-action-logs" \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"actionName\": \"scheduled-reminders\",
              \"runId\": \"${{ github.run_id }}\",
              \"workflowName\": \"Scheduled Invoice Reminders\",
              \"gitRef\": \"${{ github.ref }}\",
              \"environment\": \"$ENVIRONMENT\",
              \"startTime\": \"$WORKFLOW_START_TIME\",
              \"status\": \"running\",
              \"triggerEvent\": \"${{ github.event_name }}\",
              \"actor\": \"${{ github.actor }}\",
              \"metadata\": {
                \"dryRun\": \"$DRY_RUN\",
                \"logLevel\": \"$LOG_LEVEL\",
                \"runNumber\": ${{ github.run_number }},
                \"repository\": \"${{ github.repository }}\",
                \"workflowFile\": \"scheduled-reminders.yml\"
              }
            }")
          
          # Parse response
          response_body=$(echo "$response" | head -n -1)
          http_code=$(echo "$response" | tail -n 1)
          
          echo "Log start HTTP status: $http_code"
          echo "Log start response: $response_body"
          
          if [[ ! "$http_code" =~ ^2[0-9][0-9]$ ]]; then
            echo "‚ùå Failed to log workflow start (HTTP $http_code)"
            echo "Response: $response_body"
          else
            echo "‚úÖ Workflow start logged successfully"
          fi

      - name: Send scheduled reminder request
        if: steps.check_waitlist.outputs.should_process == 'true'
        run: |
          echo "üìß Triggering scheduled reminders..."
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Waitlist mode check: Proceeding with reminder processing"

          # Prepare the API endpoint
          REMINDER_ENDPOINT="$DEPLOYMENT_URL/api/cron/reminders"

          if [[ "$DRY_RUN" == "true" ]]; then
            echo "üß™ DRY RUN MODE - Would call: $REMINDER_ENDPOINT"
            echo "Authorization: Bearer [REDACTED]"
            echo "REMINDER_RESULT=dry_run_completed" >> $GITHUB_ENV
            echo "REMINDER_HTTP_CODE=200" >> $GITHUB_ENV
            echo "REMINDER_RESPONSE_BODY={\"success\":true,\"message\":\"Dry run completed\"}" >> $GITHUB_ENV
            exit 0
          fi

          # Make the API call with comprehensive error handling
          echo "Making request to: $REMINDER_ENDPOINT"

          response=$(curl -s -w "\n%{http_code}\n%{time_total}" \
            --max-time 300 \
            --retry 3 \
            --retry-delay 10 \
            --retry-connrefused \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Scheduled-Reminders/1.0" \
            -H "X-GitHub-Workflow: ${{ github.workflow }}" \
            -H "X-GitHub-Run-ID: ${{ github.run_id }}" \
            "$REMINDER_ENDPOINT")

          # Parse response
          response_body=$(echo "$response" | head -n -2)
          http_code=$(echo "$response" | tail -n 2 | head -n 1)
          time_total=$(echo "$response" | tail -n 1)

          echo "HTTP Status: $http_code"
          echo "Response Time: ${time_total}s"
          echo "Response Body: $response_body"

          # Export for next step
          echo "REMINDER_HTTP_CODE=$http_code" >> $GITHUB_ENV
          echo "REMINDER_RESPONSE_BODY=$response_body" >> $GITHUB_ENV
          echo "REMINDER_TIME_TOTAL=$time_total" >> $GITHUB_ENV

      - name: Validate response and handle errors
        if: steps.check_waitlist.outputs.should_process == 'true'
        run: |
          echo "üîç Validating API response..."

          if [[ "$DRY_RUN" == "true" ]]; then
            echo "‚úÖ Dry run completed successfully"
            exit 0
          fi

          # Check if HTTP status code is in 2xx range
          if [[ "$http_code" =~ ^2[0-9][0-9]$ ]]; then
            echo "‚úÖ Reminder request successful (HTTP $http_code)"
            
            # Parse and log response details if JSON
            if echo "$response_body" | jq empty 2>/dev/null; then
              success=$(echo "$response_body" | jq -r '.success // "unknown"')
              processed_count=$(echo "$response_body" | jq -r '.processedCount // "unknown"')
              execution_time=$(echo "$response_body" | jq -r '.metadata.executionTimeMs // "unknown"')
              
              echo "Success: $success"
              echo "Processed Count: $processed_count"
              echo "Execution Time: ${execution_time}ms"
            fi
          else
            echo "‚ùå Reminder request failed (HTTP $http_code)"
            echo "Response: $response_body"
            
            # Exit with error to mark workflow as failed
            exit 1
          fi

      - name: Log workflow completion
        if: always() && steps.check_waitlist.outputs.should_process == 'true'
        run: |
          echo "üìù Logging workflow completion..."

          # Calculate total duration
          end_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          start_timestamp=$(date -d "$WORKFLOW_START_TIME" +%s)
          end_timestamp=$(date +%s)
          duration_ms=$(( (end_timestamp - start_timestamp) * 1000 ))

          # Determine final status
          if [[ "${{ job.status }}" == "success" ]]; then
            final_status="completed"
            error_details=""
          else
            final_status="failed"
            error_details="Workflow failed with status: ${{ job.status }}"
          fi

          # Update log entry
          response=$(curl -s -w "\n%{http_code}" -X PUT "$DEPLOYMENT_URL/api/github-action-logs" \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"runId\": \"${{ github.run_id }}\",
              \"endTime\": \"$end_time\",
              \"durationMs\": $duration_ms,
              \"status\": \"$final_status\",
              \"errorDetails\": \"$error_details\",
              \"metadata\": {
                \"dryRun\": \"$DRY_RUN\",
                \"logLevel\": \"$LOG_LEVEL\",
                \"reminderHttpCode\": \"${REMINDER_HTTP_CODE:-unknown}\",
                \"reminderResponseTime\": \"${REMINDER_TIME_TOTAL:-unknown}\",
                \"runNumber\": ${{ github.run_number }},
                \"repository\": \"${{ github.repository }}\",
                \"workflowFile\": \"scheduled-reminders.yml\",
                \"finalStatus\": \"${{ job.status }}\"
              }
            }")
          
          # Parse response
          response_body=$(echo "$response" | head -n -1)
          http_code=$(echo "$response" | tail -n 1)
          
          echo "Log completion HTTP status: $http_code"
          echo "Log completion response: $response_body"
          
          if [[ ! "$http_code" =~ ^2[0-9][0-9]$ ]]; then
            echo "‚ùå Failed to log workflow completion (HTTP $http_code)"
            echo "Response: $response_body"
          else
            echo "‚úÖ Workflow completion logged successfully"
          fi

      - name: Workflow summary
        if: always()
        run: |
          echo "üìä Workflow Summary"
          echo "=================="
          echo "Should process: ${{ steps.check_waitlist.outputs.should_process }}"
          echo "Environment: $ENVIRONMENT"
          echo "Dry Run: $DRY_RUN"
          echo "Started: $WORKFLOW_START_TIME"
          echo "Completed: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Duration: $(($(date +%s) - $(date -d "$WORKFLOW_START_TIME" +%s)))s"
          echo "Status: ${{ job.status }}"

          if [[ "${{ steps.check_waitlist.outputs.should_process }}" == "true" ]]; then
            if [[ "${{ job.status }}" == "success" ]]; then
              echo "‚úÖ Scheduled reminders workflow completed successfully"
              echo "Waitlist mode was enabled (true) - reminders were processed"
            else
              echo "‚ùå Scheduled reminders workflow failed"
            fi
          else
            echo "‚è≠Ô∏è Skipped - waitlist mode check failed or mode was disabled"
            echo "This workflow only runs when NEXT_PUBLIC_WAITLIST_MODE = true"
            echo "Current waitlist mode status prevented execution"
          fi

      - name: Notify on failure (Optional)
        if: failure()
        run: |
          echo "üö® Workflow failed - consider adding notification integrations"
          echo "You can integrate with:"
          echo "- Slack notifications"
          echo "- Email alerts"
          echo "- Discord webhooks"
          echo "- Microsoft Teams"
          echo "- PagerDuty"

          # Example: Send to webhook (uncomment and configure as needed)
          # curl -X POST "${{ secrets.FAILURE_WEBHOOK_URL }}" \
          #   -H "Content-Type: application/json" \
          #   -d '{"text":"üö® Scheduled reminders workflow failed in ${{ github.repository }}"}'
